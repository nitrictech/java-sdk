syntax = "proto3";
package nitric.event.v1;

import "google/protobuf/struct.proto";
import "validate/validate.proto";

// protoc plugin options for code generation
option go_package = "nitric/v1;v1";
option java_package = "io.nitric.proto.event.v1";
option java_multiple_files = true;
option java_outer_classname = "Events";
option php_namespace = "Nitric\\Proto\\Event\\V1";
option csharp_namespace = "Nitric.Proto.Event.v1";

// Service for publishing asynchronous event
service EventService {
  // Publishes an message to a given topic
  rpc Publish (EventPublishRequest) returns (EventPublishResponse);
}

// Request to publish an event to a topic
message EventPublishRequest {
  // The name of the topic to publish the event to
  string topic = 1 [(validate.rules).string = {
    pattern:   "^\\w+([.\\-]\\w+)*$",
    max_bytes: 256,
  }];
  // The event to be published
  NitricEvent event = 2 [(validate.rules).message.required = true];
}

// Result of publishing an event
message EventPublishResponse {
  // The id of the published message
  // When an id was not supplied
  // one should be automatically generated
  string id = 1;
}

// Service for management of event topics
service TopicService {
  // Return a list of existing topics in the provider environment
  rpc List (TopicListRequest) returns (TopicListResponse);
}

// Request for the Topic List method
message TopicListRequest {}

// Topic List Response
message TopicListResponse {
  // The list of found topics
  repeated NitricTopic topics = 1;
}

// Represents an event topic
message NitricTopic {
  // The Nitric name for the topic
  string name = 1;
}

// Nitric Event Model
message NitricEvent {
  // A Unique ID for the Nitric Event
  string id = 1;
  // A content hint for the events payload
  string payload_type = 2;
  // The payload of the event
  google.protobuf.Struct payload = 3;
}
