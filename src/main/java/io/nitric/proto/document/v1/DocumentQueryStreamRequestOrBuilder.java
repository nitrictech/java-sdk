// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: document/v1/document.proto

package io.nitric.proto.document.v1;

public interface DocumentQueryStreamRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:nitric.document.v1.DocumentQueryStreamRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The collection to query
   * </pre>
   *
   * <code>.nitric.document.v1.Collection collection = 1;</code>
   * @return Whether the collection field is set.
   */
  boolean hasCollection();
  /**
   * <pre>
   * The collection to query
   * </pre>
   *
   * <code>.nitric.document.v1.Collection collection = 1;</code>
   * @return The collection.
   */
  io.nitric.proto.document.v1.Collection getCollection();
  /**
   * <pre>
   * The collection to query
   * </pre>
   *
   * <code>.nitric.document.v1.Collection collection = 1;</code>
   */
  io.nitric.proto.document.v1.CollectionOrBuilder getCollectionOrBuilder();

  /**
   * <pre>
   * Optional query expressions
   * </pre>
   *
   * <code>repeated .nitric.document.v1.Expression expressions = 3;</code>
   */
  java.util.List<io.nitric.proto.document.v1.Expression>
      getExpressionsList();
  /**
   * <pre>
   * Optional query expressions
   * </pre>
   *
   * <code>repeated .nitric.document.v1.Expression expressions = 3;</code>
   */
  io.nitric.proto.document.v1.Expression getExpressions(int index);
  /**
   * <pre>
   * Optional query expressions
   * </pre>
   *
   * <code>repeated .nitric.document.v1.Expression expressions = 3;</code>
   */
  int getExpressionsCount();
  /**
   * <pre>
   * Optional query expressions
   * </pre>
   *
   * <code>repeated .nitric.document.v1.Expression expressions = 3;</code>
   */
  java.util.List<? extends io.nitric.proto.document.v1.ExpressionOrBuilder>
      getExpressionsOrBuilderList();
  /**
   * <pre>
   * Optional query expressions
   * </pre>
   *
   * <code>repeated .nitric.document.v1.Expression expressions = 3;</code>
   */
  io.nitric.proto.document.v1.ExpressionOrBuilder getExpressionsOrBuilder(
      int index);

  /**
   * <pre>
   * Optional query fetch limit
   * </pre>
   *
   * <code>int32 limit = 4;</code>
   * @return The limit.
   */
  int getLimit();
}
